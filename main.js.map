{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/api.js","webpack://mesto-project-ff/./src/scripts/card.js","webpack://mesto-project-ff/./src/scripts/modal.js","webpack://mesto-project-ff/./src/scripts/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-31\",\r\n  headers: {\r\n    authorization: \"77631a48-9728-4c45-a993-b9b6adfc3678\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\nconst handleResponse = (res) => {\r\n  if (!res.ok) {\r\n    throw new Error(`Ошибка: ${res.status}`); //Проверка статуса ответа\r\n  }\r\n  return res.json(); /*Если ответ успешный (res.ok равно true), данные преобразуются в JSON и возвращаются.\r\n\r\n  Если ответ неудачный (res.ok равно false), выбрасывается ошибка, и управление передается в блок catch*/\r\n};\r\n\r\nconst handleError = (error) => {\r\n  console.error(\"Ошибка запроса\", error);\r\n};\r\n\r\nconst fetchApi = (url, method = \"GET\", body = null) => {\r\n  const options = {\r\n    method,\r\n    headers: config.headers,\r\n  };\r\n\r\n  if (body) {\r\n    options.body = JSON.stringify(body);\r\n  }\r\n\r\n  return fetch(url, options).then(handleResponse).catch(handleError);\r\n};\r\n\r\nexport const fetchUserData = () => fetchApi(`${config.baseUrl}/users/me`);\r\n\r\nexport const fetchCards = () => fetchApi(`${config.baseUrl}/cards`);\r\n\r\nexport const fetchEditProfile = (name, about) => {\r\n  return fetchApi(`${config.baseUrl}/users/me`, \"PATCH\", { name, about });\r\n};\r\n\r\nexport const fetchAddCards = (name, link) => {\r\n  return fetchApi(`${config.baseUrl}/cards`, \"POST\", { name, link });\r\n};\r\n\r\nexport const fetchDeleteCard = (cardId) => {\r\n  return fetchApi(`${config.baseUrl}/cards/${cardId}`, \"DELETE\");\r\n};\r\n\r\nexport const fetchAddlike = (cardId) => {\r\n  return fetchApi(`${config.baseUrl}/cards/likes/${cardId}`, \"PUT\");\r\n};\r\n\r\nexport const fetchDeletelike = (cardId) => {\r\n  return fetchApi(`${config.baseUrl}/cards/likes/${cardId}`, \"DELETE\");\r\n};\r\n\r\nexport const fetchAvatarData = (avatar) => {\r\n  return fetchApi(`${config.baseUrl}/users/me/avatar`, \"PATCH\", { avatar });\r\n};\r\n","import { fetchDeleteCard, fetchAddlike, fetchDeletelike } from \"./api\";\r\n// создаю карточку, делаю копию контейнера и присваиваю все нужные значения\r\nconst cardTemplate = document.querySelector(\"#card-template\").content; // переменная хранящая темплейт\r\n\r\n//функция удаления карточек\r\nexport function deleteCard(cardElement, cardId) {\r\n  fetchDeleteCard(cardId)\r\n    .then(() => {\r\n      cardElement.remove(); // Удаляем элемент после успешного запроса\r\n    })\r\n    .catch((err) => console.error(\"Ошибка при удалении карточки:\", err));\r\n}\r\n\r\nexport function likeCard(cardElement, card, likeCount) {\r\n  if (!cardElement.classList.contains(\"card__like-button_is-active\")) {\r\n    fetchAddlike(card._id)\r\n      .then((res) => {\r\n        cardElement.classList.add(\"card__like-button_is-active\");\r\n        likeCount.textContent = res.likes.length; // обновляем количество лайков\r\n      })\r\n      .catch((err) => console.log(\"Ошибка поставновки лайка:\", err));\r\n  } else {\r\n    fetchDeletelike(card._id)\r\n      .then((res) => {\r\n        console.log(res);\r\n        cardElement.classList.remove(\"card__like-button_is-active\");\r\n        likeCount.textContent = res.likes.length; // обновляем количество лайков\r\n      })\r\n      .catch((err) => console.log(\"Ошибка удаления лайка:\", err));\r\n  }\r\n}\r\n\r\n// @todo: Функция создания карточки\r\nexport const createCard = (card, userID, likeCard, deleteCard, wiewImage) => {\r\n  const cardElement = cardTemplate\r\n    .querySelector(\".places__item\")\r\n    .cloneNode(true); //копия блока с его содержимым\r\n  const cardImage = cardElement.querySelector(\".card__image\");\r\n  cardImage.src = card.link; // ссылка на картинку\r\n  cardImage.alt = \"На картинке изображено: \" + card.name; // альт для каждой картинки\r\n  cardElement.querySelector(\".card__title\").textContent = card.name; // тайтл\r\n\r\n  // Обработчик клика для кнопки удаления\r\n\r\n  const buttonCardDelete = cardElement.querySelector(\".card__delete-button\"); // кнопка удаления\r\n  buttonCardDelete.addEventListener(\"click\", (evt) => {\r\n    evt.stopPropagation();\r\n    deleteCard(cardElement, card._id); // вызываем функцию удаления\r\n  });\r\n  // Проверка существования данных карточки\r\n  if (card && card.owner && card.owner._id) {\r\n    if (userID === card.owner._id) {\r\n      buttonCardDelete.style.display = \"block\";\r\n    } else {\r\n      buttonCardDelete.style.display = \"none\";\r\n    }\r\n  }\r\n\r\n  // Обработчик клика для кнопки лайка\r\n  const buttonLikeCard = cardElement.querySelector(\".card__like-button\");\r\n  buttonLikeCard.addEventListener(\"click\", (evt) => {\r\n    likeCard(evt.target, card, likeCount); // Вызываем функцию обработки лайка\r\n  });\r\n\r\n  let likeCount = cardElement.querySelector(\".card__like-counter\");\r\n  if (Array.isArray(card.likes) && card.likes.length > 0) {\r\n    likeCount.textContent = card.likes.length; // Если есть лайки, отображаем их количество\r\n    buttonLikeCard.classList.toggle(\r\n      \"card__like-button_is-active\",\r\n      card.likes.some((like) => like._id === userID)\r\n    ); //Отображаем лайки\r\n  } else {\r\n    likeCount.textContent = 0; // Если лайков нет, устанавливаем 0\r\n  }\r\n\r\n  cardImage.addEventListener(\"click\", () => {\r\n    wiewImage(card);\r\n  });\r\n\r\n  return cardElement; // возврат новых значений\r\n};\r\n","function closeByEscape(evt) {\r\n  if (evt.key === \"Escape\") {\r\n    const openedPopup = document.querySelector(\".popup_is-opened\");\r\n    if (openedPopup) {\r\n      closePopup(openedPopup);\r\n    }\r\n  }\r\n}\r\n\r\nexport function openPopup(popup) {\r\n  popup.classList.add(\"popup_is-animated\");\r\n  popup.classList.add(\"popup_is-opened\");\r\n  document.addEventListener(\"keydown\", closeByEscape);\r\n}\r\n\r\nexport function closePopup(popup) {\r\n  popup.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", closeByEscape);\r\n}\r\n\r\nexport function setPopupListeners() {\r\n  // Обработчик для закрытия попапа по клику на кнопку закрытия\r\n  document.querySelectorAll(\".popup\").forEach((popup) => {\r\n    const closeButton = popup.querySelector(\".popup__close\");\r\n    closeButton.addEventListener(\"click\", () => closePopup(popup));\r\n\r\n    // обработчик клика на оверлей\r\n    popup.addEventListener(\"click\", (evt) => {\r\n      // Проверяем, был ли клик по самому оверлею (внешнему контейнеру попапа)\r\n      if (evt.target === popup) {\r\n        closePopup(popup);\r\n      }\r\n    });\r\n  });\r\n}\r\n","// Функция для отображения ошибки ввода\r\nconst showInputError = (formElement, inputElement, errorMessage, config) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  inputElement.classList.add(config.inputErrorClass);\r\n  errorElement.textContent = errorMessage;\r\n  errorElement.classList.add(config.errorClass);\r\n};\r\n\r\n// Функция для скрытия ошибки ввода\r\nconst hideInputError = (formElement, inputElement, config) => {\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\r\n  errorElement.textContent = \"\";\r\n  errorElement.classList.remove(config.errorClass);\r\n  inputElement.classList.remove(config.inputErrorClass);\r\n};\r\n\r\n// Функция валидации ввода\r\nconst isValid = (formElement, inputElement, config) => {\r\n  if (inputElement.validity.patternMismatch) {\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage);\r\n  } else {\r\n    inputElement.setCustomValidity(\"\");\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    showInputError(\r\n      formElement,\r\n      inputElement,\r\n      inputElement.validationMessage,\r\n      config\r\n    );\r\n  } else {\r\n    hideInputError(formElement, inputElement, config);\r\n  }\r\n};\r\n\r\n// Функция для проверки наличия недействительных полей\r\nconst hasInvalidInput = (inputList) => {\r\n  return inputList.some((inputElement) => {\r\n    return !inputElement.validity.valid;\r\n  });\r\n};\r\n\r\n// Функция для смены статуса кнопки\r\nconst swapButtonStatus = (inputList, buttonElement, config) => {\r\n  if (hasInvalidInput(inputList)) {\r\n    buttonElement.classList.add(config.inactiveButtonClass);\r\n    buttonElement.disabled = true;\r\n  } else {\r\n    buttonElement.classList.remove(config.inactiveButtonClass);\r\n    buttonElement.disabled = false;\r\n  }\r\n};\r\n\r\n// Функция для установки обработчиков событий\r\nconst setEventListeners = (formElement, config) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(config.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(config.submitButtonSelector);\r\n  swapButtonStatus(inputList, buttonElement, config);\r\n\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.addEventListener(\"input\", () => {\r\n      isValid(formElement, inputElement, config);\r\n      swapButtonStatus(inputList, buttonElement, config);\r\n    });\r\n  });\r\n};\r\n\r\n// Функция для включения валидации\r\nexport const enableValidation = (config) => {\r\n  const formList = Array.from(document.querySelectorAll(config.formSelector));\r\n  formList.forEach((formElement) => {\r\n    setEventListeners(formElement, config);\r\n  });\r\n};\r\n\r\n// Функция для очистки валидации\r\nexport const clearValidation = (formElement, config) => {\r\n  const inputList = Array.from(\r\n    formElement.querySelectorAll(config.inputSelector)\r\n  );\r\n  const buttonElement = formElement.querySelector(config.submitButtonSelector);\r\n\r\n  // Очищаем значения полей и скрываем ошибки\r\n  inputList.forEach((inputElement) => {\r\n    inputElement.value = \"\"; // Сброс значения поля ввода\r\n    hideInputError(formElement, inputElement, config); // Скрываем ошибку ввода\r\n  });\r\n\r\n  // Блокируем кнопку и устанавливаем класс неактивной\r\n  buttonElement.classList.add(config.inactiveButtonClass);\r\n  buttonElement.disabled = true;\r\n};\r\n","import \"./pages/index.css\";\r\n\r\nimport { createCard, deleteCard, likeCard } from \"./scripts/card\";\r\n\r\nimport { openPopup, closePopup, setPopupListeners } from \"./scripts/modal\";\r\n\r\nimport { enableValidation, clearValidation } from \"./scripts/validation\";\r\n\r\nimport {\r\n  fetchUserData,\r\n  fetchCards,\r\n  fetchEditProfile,\r\n  fetchAddCards,\r\n  fetchAvatarData,\r\n} from \"./scripts/api\";\r\n\r\nconst container = document.querySelector(\".places__list\"); // место куда добавляем\r\nconst editButton = document.querySelector(\".profile__edit-button\"); // кнопка редактирования профиля\r\nconst popupEdit = document.querySelector(\".popup_type_edit\"); // попап редактирования профиля\r\nconst profileButton = document.querySelector(\".profile__add-button\"); // кнопка добавления новой карточки\r\nconst popupEditImage = document.querySelector(\".profile__image\"); //аватар-кнопка\r\n//форма карточек\r\nconst newCardsForm = document.forms.new_place;\r\nconst namePlace = newCardsForm.elements.place_name;\r\nconst linkCard = newCardsForm.elements.link;\r\n//форма профиля\r\nconst profileForm = document.forms.edit_profile;\r\nconst nameInput = profileForm.elements.name;\r\nconst jobInput = profileForm.elements.description;\r\n// профиль редактирования\r\nconst nameElement = document.querySelector(\".profile__title\");\r\nconst jobElement = document.querySelector(\".profile__description\");\r\nconst newCard = document.querySelector(\".popup_type_new-card\"); // попап добавления новой карточки\r\n//попап карточки\r\nconst popupImage = document.querySelector(\".popup_type_image\");\r\nconst imagePopup = popupImage.querySelector(\".popup__image\");\r\nconst popupCartion = popupImage.querySelector(\".popup__caption\");\r\n\r\nconst popupAvatar = document.querySelector(\".popup_type_new-avatar\"); //попап аватара\r\n\r\n//форма смены аватара\r\nconst formAvatar = document.forms.new_avatar;\r\nconst inputAvatar = formAvatar.elements.new_avatar;\r\n\r\n// @todo: Вывести карточки на страницу\r\nconst addCard = (cardElement, container) => {\r\n  container.append(cardElement);\r\n};\r\n\r\nlet userID = null;\r\n\r\nconst loadData = () => {\r\n  Promise.all([fetchUserData(), fetchCards()])\r\n    .then(([userData, cards]) => {\r\n      userID = userData._id; // мое id\r\n      nameElement.textContent = userData.name; // обновляем имя\r\n      jobElement.textContent = userData.about; // обновляем описание\r\n\r\n      const avatarImageUrl = userData.avatar; // Получаем URL аватара\r\n      popupEditImage.style.backgroundImage = `url(${avatarImageUrl})`; // Устанавливаем аватар\r\n\r\n      return cards; // возвращаем массив карточек\r\n    })\r\n    .then((cards) => {\r\n      // используется новый массив из запроса к серверу\r\n      cards.forEach((card) => {\r\n        const newCard = createCard(\r\n          card,\r\n          userID,\r\n          likeCard,\r\n          deleteCard,\r\n          wiewImage\r\n        );\r\n        addCard(newCard, container); // добавляем карточку в контейнер\r\n      });\r\n    })\r\n    .catch((cards) =>\r\n      console.log(\"Ошибка вывода карточек на страницу:\", cards)\r\n    );\r\n};\r\n\r\nloadData();\r\n\r\nsetPopupListeners(); // вызов функции обработчика клика по оверлею и эскейп\r\n\r\nexport function wiewImage(cardImage) {\r\n  imagePopup.src = cardImage.link;\r\n  imagePopup.alt = cardImage.name;\r\n  popupCartion.textContent = cardImage.name;\r\n\r\n  openPopup(popupImage);\r\n}\r\n\r\nfunction fillFormWithProfileData() {\r\n  //заполняет поля формы значениями текущего имени и описания пользователя\r\n  nameInput.value = nameElement.textContent; // Заполняем поле имени\r\n  jobInput.value = jobElement.textContent; // Заполняем поле описания\r\n}\r\n\r\npopupEditImage.addEventListener(\"click\", () => {\r\n  openPopup(popupAvatar);\r\n});\r\n\r\neditButton.addEventListener(\"click\", () => {\r\n  fillFormWithProfileData(); //заполнение полей\r\n  clearValidation(profileForm, config);\r\n  openPopup(popupEdit);\r\n});\r\n\r\n// Обработчик «отправки» формы\r\nfunction handleProfileButton(evt) {\r\n  evt.preventDefault(); // Эта строчка отменяет стандартную отправку формы.\r\n  const profileButton = popupEdit.querySelector(\".popup__button\"); // Локальная переменная для кнопки\r\n  profileButton.textContent = \"Сохранение...\";\r\n\r\n  const nameValue = nameInput.value;\r\n  const jobValue = jobInput.value;\r\n\r\n  fetchEditProfile(nameValue, jobValue)\r\n    .then((data) => {\r\n      nameElement.textContent = data.name;\r\n      jobElement.textContent = data.about;\r\n      console.log(\"Профиль обновлен:\", data);\r\n      profileButton.textContent = \"Сохранить\";\r\n      closePopup(popupEdit);\r\n    })\r\n    .catch((error) => {\r\n      profileButton.textContent = \"Сохранить\";\r\n      console.error(\"Ошибка при обновлении профиля:\", error);\r\n    });\r\n}\r\n\r\n// Прикрепляем обработчик к форме:\r\n// он будет следить за событием “submit” - «отправка»\r\nprofileForm.addEventListener(\"submit\", handleProfileButton);\r\n\r\nprofileButton.addEventListener(\"click\", () => {\r\n  clearValidation(newCardsForm, config);\r\n  openPopup(newCard);\r\n});\r\n\r\n// Обработчик «отправки» формы\r\nfunction handleCardSubmit(evt) {\r\n  evt.preventDefault(); // Сброс дефолтных настроек\r\n  const cardButton = newCard.querySelector(\".popup__button\"); // Локальная переменная для кнопки\r\n  cardButton.textContent = \"Сохранение...\";\r\n\r\n  const newCardData = {\r\n    name: namePlace.value,\r\n    link: linkCard.value,\r\n  };\r\n\r\n  fetchAddCards(newCardData.name, newCardData.link)\r\n    .then((res) => {\r\n      const newCards = createCard(res, userID, likeCard, deleteCard, wiewImage);\r\n      container.prepend(newCards);\r\n      closePopup(newCard);\r\n      newCardsForm.reset();\r\n      cardButton.textContent = \"Сохранить\"; // Вернуть текст кнопки\r\n      console.log(res);\r\n    })\r\n    .catch((error) => {\r\n      cardButton.textContent = \"Сохранить\"; // Вернуть текст кнопки в случае ошибки\r\n      console.error(\"Ошибка при добавлении новой карточки:\", error);\r\n    });\r\n}\r\n\r\n// Добавляем обработчик события submit и передаем необходимые аргументы\r\nnewCardsForm.addEventListener(\"submit\", (evt) =>\r\n  handleCardSubmit(\r\n    evt,\r\n    newCardsForm,\r\n    container,\r\n    createCard,\r\n    deleteCard,\r\n    wiewImage,\r\n    likeCard\r\n  )\r\n);\r\n\r\nconst handleAvatarSubmit = (evt) => {\r\n  evt.preventDefault();\r\n  const avatarButton = popupAvatar.querySelector(\".popup__button\"); // Локальная переменная для кнопки\r\n  avatarButton.textContent = \"Сохранение...\";\r\n\r\n  const avatarValue = inputAvatar.value;\r\n\r\n  fetchAvatarData(avatarValue)\r\n    .then((res) => {\r\n      loadData();\r\n      console.log(\"Замена аватара успешна:\", res);\r\n      avatarButton.textContent = \"Сохранить\"; // Вернуть текст кнопки\r\n      closePopup(popupAvatar);\r\n      formAvatar.reset();\r\n    })\r\n    .catch((er) => {\r\n      avatarButton.textContent = \"Сохранить\"; // Вернуть текст кнопки в случае ошибки\r\n      console.log(\"Произошла ошибка в замене аватара:\", er);\r\n    });\r\n};\r\n\r\nformAvatar.addEventListener(\"submit\", handleAvatarSubmit);\r\n\r\n// включение валидации вызовом enableValidation\r\n// все настройки передаются при вызове\r\nconst config = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"form__input_type_error\",\r\n  errorClass: \"form__input-error_active\",\r\n};\r\n\r\nenableValidation(config);\r\n"],"names":["config","baseUrl","headers","authorization","handleResponse","res","ok","Error","concat","status","json","handleError","error","console","fetchApi","url","body","arguments","length","undefined","options","method","JSON","stringify","fetch","then","catch","cardTemplate","document","querySelector","content","deleteCard","cardElement","cardId","fetchDeleteCard","remove","err","likeCard","card","likeCount","classList","contains","fetchDeletelike","_id","log","textContent","likes","add","createCard","userID","wiewImage","cloneNode","cardImage","src","link","alt","name","buttonCardDelete","addEventListener","evt","stopPropagation","owner","style","display","buttonLikeCard","target","Array","isArray","toggle","some","like","closeByEscape","key","openedPopup","closePopup","openPopup","popup","removeEventListener","hideInputError","formElement","inputElement","errorElement","id","errorClass","inputErrorClass","swapButtonStatus","inputList","buttonElement","validity","valid","hasInvalidInput","inactiveButtonClass","disabled","clearValidation","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","value","container","editButton","popupEdit","profileButton","popupEditImage","newCardsForm","forms","new_place","namePlace","elements","place_name","linkCard","profileForm","edit_profile","nameInput","jobInput","description","nameElement","jobElement","newCard","popupImage","imagePopup","popupCartion","popupAvatar","formAvatar","new_avatar","inputAvatar","loadData","Promise","all","_ref","_ref2","userData","cards","about","avatarImageUrl","avatar","backgroundImage","append","addCard","preventDefault","data","cardButton","newCardData","newCards","prepend","reset","handleCardSubmit","avatarButton","er","formSelector","patternMismatch","setCustomValidity","dataset","errorMessage","showInputError","validationMessage","isValid","setEventListeners","enableValidation"],"sourceRoot":""}